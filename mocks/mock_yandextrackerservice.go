// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/yandextrackerservice_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/yandextrackerservice_interface.go -destination=mocks/mock_yandextrackerservice.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/IndianMax03/yandex-tracker-go-client/v3/model"
	gomock "go.uber.org/mock/gomock"
	resty "resty.dev/v3"
)

// MockYandexTrackerService is a mock of YandexTrackerService interface.
type MockYandexTrackerService struct {
	ctrl     *gomock.Controller
	recorder *MockYandexTrackerServiceMockRecorder
	isgomock struct{}
}

// MockYandexTrackerServiceMockRecorder is the mock recorder for MockYandexTrackerService.
type MockYandexTrackerServiceMockRecorder struct {
	mock *MockYandexTrackerService
}

// NewMockYandexTrackerService creates a new mock instance.
func NewMockYandexTrackerService(ctrl *gomock.Controller) *MockYandexTrackerService {
	mock := &MockYandexTrackerService{ctrl: ctrl}
	mock.recorder = &MockYandexTrackerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYandexTrackerService) EXPECT() *MockYandexTrackerServiceMockRecorder {
	return m.recorder
}

// CreateIssue mocks base method.
func (m *MockYandexTrackerService) CreateIssue(req *model.IssueCreateRequest) (*model.IssueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", req)
	ret0, _ := ret[0].(*model.IssueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssue indicates an expected call of CreateIssue.
func (mr *MockYandexTrackerServiceMockRecorder) CreateIssue(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockYandexTrackerService)(nil).CreateIssue), req)
}

// UploadTemporaryAttachment mocks base method.
func (m *MockYandexTrackerService) UploadTemporaryAttachment(multipartReq *resty.MultipartField) (*model.AttachmentFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTemporaryAttachment", multipartReq)
	ret0, _ := ret[0].(*model.AttachmentFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTemporaryAttachment indicates an expected call of UploadTemporaryAttachment.
func (mr *MockYandexTrackerServiceMockRecorder) UploadTemporaryAttachment(multipartReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTemporaryAttachment", reflect.TypeOf((*MockYandexTrackerService)(nil).UploadTemporaryAttachment), multipartReq)
}
