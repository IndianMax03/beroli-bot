// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/receiver_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/receiver_interface.go -destination=mocks/mock_receiver.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/IndianMax03/beroli-bot/internal/domain"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockReceiver is a mock of Receiver interface.
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
	isgomock struct{}
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver.
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance.
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockReceiver) Cancel(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockReceiverMockRecorder) Cancel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockReceiver)(nil).Cancel), arg0)
}

// CreateIssue mocks base method.
func (m *MockReceiver) CreateIssue(arg0, arg1 string, arg2 map[string]domain.Command) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssue indicates an expected call of CreateIssue.
func (mr *MockReceiverMockRecorder) CreateIssue(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockReceiver)(nil).CreateIssue), arg0, arg1, arg2)
}

// CreateTrackerIssue mocks base method.
func (m *MockReceiver) CreateTrackerIssue(dbCtx context.Context, user *domain.User) (*domain.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrackerIssue", dbCtx, user)
	ret0, _ := ret[0].(*domain.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrackerIssue indicates an expected call of CreateTrackerIssue.
func (mr *MockReceiverMockRecorder) CreateTrackerIssue(dbCtx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrackerIssue", reflect.TypeOf((*MockReceiver)(nil).CreateTrackerIssue), dbCtx, user)
}

// Done mocks base method.
func (m *MockReceiver) Done(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Done indicates an expected call of Done.
func (mr *MockReceiverMockRecorder) Done(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockReceiver)(nil).Done), arg0, arg1)
}

// HelpCommand mocks base method.
func (m *MockReceiver) HelpCommand(arg0 map[string]domain.Command) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelpCommand", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelpCommand indicates an expected call of HelpCommand.
func (mr *MockReceiverMockRecorder) HelpCommand(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelpCommand", reflect.TypeOf((*MockReceiver)(nil).HelpCommand), arg0)
}

// MyIssues mocks base method.
func (m *MockReceiver) MyIssues(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyIssues", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyIssues indicates an expected call of MyIssues.
func (mr *MockReceiverMockRecorder) MyIssues(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyIssues", reflect.TypeOf((*MockReceiver)(nil).MyIssues), arg0)
}

// NoCommand mocks base method.
func (m *MockReceiver) NoCommand(arg0, arg1, arg2 string, arg3 tgbotapi.FileID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoCommand", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NoCommand indicates an expected call of NoCommand.
func (mr *MockReceiverMockRecorder) NoCommand(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoCommand", reflect.TypeOf((*MockReceiver)(nil).NoCommand), arg0, arg1, arg2, arg3)
}

// StateCommand mocks base method.
func (m *MockReceiver) StateCommand(arg0 string, arg1 map[string]domain.Command) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateCommand", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateCommand indicates an expected call of StateCommand.
func (mr *MockReceiverMockRecorder) StateCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateCommand", reflect.TypeOf((*MockReceiver)(nil).StateCommand), arg0, arg1)
}

// UploadAttachments mocks base method.
func (m *MockReceiver) UploadAttachments(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttachments", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAttachments indicates an expected call of UploadAttachments.
func (mr *MockReceiverMockRecorder) UploadAttachments(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttachments", reflect.TypeOf((*MockReceiver)(nil).UploadAttachments), user)
}

// UploadDescriptionAttachments mocks base method.
func (m *MockReceiver) UploadDescriptionAttachments(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadDescriptionAttachments", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadDescriptionAttachments indicates an expected call of UploadDescriptionAttachments.
func (mr *MockReceiverMockRecorder) UploadDescriptionAttachments(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadDescriptionAttachments", reflect.TypeOf((*MockReceiver)(nil).UploadDescriptionAttachments), user)
}

// ValidateAndInitUser mocks base method.
func (m *MockReceiver) ValidateAndInitUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndInitUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAndInitUser indicates an expected call of ValidateAndInitUser.
func (mr *MockReceiverMockRecorder) ValidateAndInitUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndInitUser", reflect.TypeOf((*MockReceiver)(nil).ValidateAndInitUser), arg0)
}

// ValidateState mocks base method.
func (m *MockReceiver) ValidateState(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateState indicates an expected call of ValidateState.
func (mr *MockReceiverMockRecorder) ValidateState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateState", reflect.TypeOf((*MockReceiver)(nil).ValidateState), arg0, arg1)
}
