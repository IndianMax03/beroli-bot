// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/collectionservice_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/collectionservice_interface.go -destination=mocks/mock_collectionservice.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/IndianMax03/beroli-bot/internal/domain"
	model "github.com/IndianMax03/yandex-tracker-go-client/v3/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionService is a mock of CollectionService interface.
type MockCollectionService struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionServiceMockRecorder
	isgomock struct{}
}

// MockCollectionServiceMockRecorder is the mock recorder for MockCollectionService.
type MockCollectionServiceMockRecorder struct {
	mock *MockCollectionService
}

// NewMockCollectionService creates a new mock instance.
func NewMockCollectionService(ctrl *gomock.Controller) *MockCollectionService {
	mock := &MockCollectionService{ctrl: ctrl}
	mock.recorder = &MockCollectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionService) EXPECT() *MockCollectionServiceMockRecorder {
	return m.recorder
}

// AppendAttachmentIssue mocks base method.
func (m *MockCollectionService) AppendAttachmentIssue(ctx context.Context, username, attachmentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendAttachmentIssue", ctx, username, attachmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendAttachmentIssue indicates an expected call of AppendAttachmentIssue.
func (mr *MockCollectionServiceMockRecorder) AppendAttachmentIssue(ctx, username, attachmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendAttachmentIssue", reflect.TypeOf((*MockCollectionService)(nil).AppendAttachmentIssue), ctx, username, attachmentID)
}

// AppendDataIssue mocks base method.
func (m *MockCollectionService) AppendDataIssue(ctx context.Context, username string, data *domain.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendDataIssue", ctx, username, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendDataIssue indicates an expected call of AppendDataIssue.
func (mr *MockCollectionServiceMockRecorder) AppendDataIssue(ctx, username, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendDataIssue", reflect.TypeOf((*MockCollectionService)(nil).AppendDataIssue), ctx, username, data)
}

// AppendDescriptionAttachmentIssue mocks base method.
func (m *MockCollectionService) AppendDescriptionAttachmentIssue(ctx context.Context, username, descriptionAttachmentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendDescriptionAttachmentIssue", ctx, username, descriptionAttachmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendDescriptionAttachmentIssue indicates an expected call of AppendDescriptionAttachmentIssue.
func (mr *MockCollectionServiceMockRecorder) AppendDescriptionAttachmentIssue(ctx, username, descriptionAttachmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendDescriptionAttachmentIssue", reflect.TypeOf((*MockCollectionService)(nil).AppendDescriptionAttachmentIssue), ctx, username, descriptionAttachmentID)
}

// AppendTagIssue mocks base method.
func (m *MockCollectionService) AppendTagIssue(ctx context.Context, username string, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendTagIssue", ctx, username, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendTagIssue indicates an expected call of AppendTagIssue.
func (mr *MockCollectionServiceMockRecorder) AppendTagIssue(ctx, username, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendTagIssue", reflect.TypeOf((*MockCollectionService)(nil).AppendTagIssue), ctx, username, tags)
}

// ClearIssue mocks base method.
func (m *MockCollectionService) ClearIssue(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearIssue", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearIssue indicates an expected call of ClearIssue.
func (mr *MockCollectionServiceMockRecorder) ClearIssue(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearIssue", reflect.TypeOf((*MockCollectionService)(nil).ClearIssue), ctx, username)
}

// CreateUser mocks base method.
func (m *MockCollectionService) CreateUser(ctx context.Context, u *domain.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser", ctx, u)
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCollectionServiceMockRecorder) CreateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCollectionService)(nil).CreateUser), ctx, u)
}

// ExistsUser mocks base method.
func (m *MockCollectionService) ExistsUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExistsUser indicates an expected call of ExistsUser.
func (mr *MockCollectionServiceMockRecorder) ExistsUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsUser", reflect.TypeOf((*MockCollectionService)(nil).ExistsUser), ctx, username)
}

// GetIssue mocks base method.
func (m *MockCollectionService) GetIssue(ctx context.Context, username string) (*model.IssueCreateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssue", ctx, username)
	ret0, _ := ret[0].(*model.IssueCreateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssue indicates an expected call of GetIssue.
func (mr *MockCollectionServiceMockRecorder) GetIssue(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssue", reflect.TypeOf((*MockCollectionService)(nil).GetIssue), ctx, username)
}

// GetIssues mocks base method.
func (m *MockCollectionService) GetIssues(ctx context.Context, username string) ([]domain.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssues", ctx, username)
	ret0, _ := ret[0].([]domain.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssues indicates an expected call of GetIssues.
func (mr *MockCollectionServiceMockRecorder) GetIssues(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssues", reflect.TypeOf((*MockCollectionService)(nil).GetIssues), ctx, username)
}

// GetStateUser mocks base method.
func (m *MockCollectionService) GetStateUser(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateUser", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateUser indicates an expected call of GetStateUser.
func (mr *MockCollectionServiceMockRecorder) GetStateUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateUser", reflect.TypeOf((*MockCollectionService)(nil).GetStateUser), ctx, username)
}

// GetUser mocks base method.
func (m *MockCollectionService) GetUser(ctx context.Context, username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockCollectionServiceMockRecorder) GetUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCollectionService)(nil).GetUser), ctx, username)
}

// ResetUser mocks base method.
func (m *MockCollectionService) ResetUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetUser indicates an expected call of ResetUser.
func (mr *MockCollectionServiceMockRecorder) ResetUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUser", reflect.TypeOf((*MockCollectionService)(nil).ResetUser), ctx, username)
}

// UpdateDescriptionIssue mocks base method.
func (m *MockCollectionService) UpdateDescriptionIssue(ctx context.Context, username, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDescriptionIssue", ctx, username, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDescriptionIssue indicates an expected call of UpdateDescriptionIssue.
func (mr *MockCollectionServiceMockRecorder) UpdateDescriptionIssue(ctx, username, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptionIssue", reflect.TypeOf((*MockCollectionService)(nil).UpdateDescriptionIssue), ctx, username, text)
}

// UpdateStateUser mocks base method.
func (m *MockCollectionService) UpdateStateUser(ctx context.Context, username, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStateUser", ctx, username, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStateUser indicates an expected call of UpdateStateUser.
func (mr *MockCollectionServiceMockRecorder) UpdateStateUser(ctx, username, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateUser", reflect.TypeOf((*MockCollectionService)(nil).UpdateStateUser), ctx, username, state)
}

// UpdateSummaryIssue mocks base method.
func (m *MockCollectionService) UpdateSummaryIssue(ctx context.Context, username, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSummaryIssue", ctx, username, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSummaryIssue indicates an expected call of UpdateSummaryIssue.
func (mr *MockCollectionServiceMockRecorder) UpdateSummaryIssue(ctx, username, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSummaryIssue", reflect.TypeOf((*MockCollectionService)(nil).UpdateSummaryIssue), ctx, username, text)
}

// UpdateUser mocks base method.
func (m *MockCollectionService) UpdateUser(ctx context.Context, u *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockCollectionServiceMockRecorder) UpdateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockCollectionService)(nil).UpdateUser), ctx, u)
}
